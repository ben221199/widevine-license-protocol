<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: license_protocol.proto

namespace VideoWidevineServer\SDK;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Certificate definition for user devices, intermediate, service, and root
 * certificates.
 *
 * Generated from protobuf message <code>VideoWidevineServer.SDK.DeviceCertificate</code>
 */
class DeviceCertificate extends \Google\Protobuf\Internal\Message
{
    /**
     * Type of certificate. Required.
     *
     * Generated from protobuf field <code>optional .VideoWidevineServer.SDK.DeviceCertificate.CertificateType type = 1;</code>
     */
    protected $type = null;
    /**
     * 128-bit globally unique serial number of certificate.
     * Value is 0 for root certificate. Required.
     *
     * Generated from protobuf field <code>optional bytes serial_number = 2;</code>
     */
    protected $serial_number = null;
    /**
     * POSIX time, in seconds, when the certificate was created. Required.
     *
     * Generated from protobuf field <code>optional uint32 creation_time_seconds = 3;</code>
     */
    protected $creation_time_seconds = null;
    /**
     * Device public key. PKCS#1 ASN.1 DER-encoded. Required.
     *
     * Generated from protobuf field <code>optional bytes public_key = 4;</code>
     */
    protected $public_key = null;
    /**
     * Widevine system ID for the device. Required for intermediate and
     * user device certificates.
     *
     * Generated from protobuf field <code>optional uint32 system_id = 5;</code>
     */
    protected $system_id = null;
    /**
     * Deprecated field, which used to indicate whether the device was a test
     * (non-production) device. The test_device field in ProvisionedDeviceInfo
     * below should be observed instead.
     *
     * Generated from protobuf field <code>optional bool test_device_deprecated = 6 [deprecated = true];</code>
     * @deprecated
     */
    protected $test_device_deprecated = null;
    /**
     * Service identifier (web origin) for the service which owns the certificate.
     * Required for service certificates.
     *
     * Generated from protobuf field <code>optional string service_id = 7;</code>
     */
    protected $service_id = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $type
     *           Type of certificate. Required.
     *     @type string $serial_number
     *           128-bit globally unique serial number of certificate.
     *           Value is 0 for root certificate. Required.
     *     @type int $creation_time_seconds
     *           POSIX time, in seconds, when the certificate was created. Required.
     *     @type string $public_key
     *           Device public key. PKCS#1 ASN.1 DER-encoded. Required.
     *     @type int $system_id
     *           Widevine system ID for the device. Required for intermediate and
     *           user device certificates.
     *     @type bool $test_device_deprecated
     *           Deprecated field, which used to indicate whether the device was a test
     *           (non-production) device. The test_device field in ProvisionedDeviceInfo
     *           below should be observed instead.
     *     @type string $service_id
     *           Service identifier (web origin) for the service which owns the certificate.
     *           Required for service certificates.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\LicenseProtocol::initOnce();
        parent::__construct($data);
    }

    /**
     * Type of certificate. Required.
     *
     * Generated from protobuf field <code>optional .VideoWidevineServer.SDK.DeviceCertificate.CertificateType type = 1;</code>
     * @return int
     */
    public function getType()
    {
        return isset($this->type) ? $this->type : 0;
    }

    public function hasType()
    {
        return isset($this->type);
    }

    public function clearType()
    {
        unset($this->type);
    }

    /**
     * Type of certificate. Required.
     *
     * Generated from protobuf field <code>optional .VideoWidevineServer.SDK.DeviceCertificate.CertificateType type = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkEnum($var, \VideoWidevineServer\SDK\DeviceCertificate\CertificateType::class);
        $this->type = $var;

        return $this;
    }

    /**
     * 128-bit globally unique serial number of certificate.
     * Value is 0 for root certificate. Required.
     *
     * Generated from protobuf field <code>optional bytes serial_number = 2;</code>
     * @return string
     */
    public function getSerialNumber()
    {
        return isset($this->serial_number) ? $this->serial_number : '';
    }

    public function hasSerialNumber()
    {
        return isset($this->serial_number);
    }

    public function clearSerialNumber()
    {
        unset($this->serial_number);
    }

    /**
     * 128-bit globally unique serial number of certificate.
     * Value is 0 for root certificate. Required.
     *
     * Generated from protobuf field <code>optional bytes serial_number = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setSerialNumber($var)
    {
        GPBUtil::checkString($var, False);
        $this->serial_number = $var;

        return $this;
    }

    /**
     * POSIX time, in seconds, when the certificate was created. Required.
     *
     * Generated from protobuf field <code>optional uint32 creation_time_seconds = 3;</code>
     * @return int
     */
    public function getCreationTimeSeconds()
    {
        return isset($this->creation_time_seconds) ? $this->creation_time_seconds : 0;
    }

    public function hasCreationTimeSeconds()
    {
        return isset($this->creation_time_seconds);
    }

    public function clearCreationTimeSeconds()
    {
        unset($this->creation_time_seconds);
    }

    /**
     * POSIX time, in seconds, when the certificate was created. Required.
     *
     * Generated from protobuf field <code>optional uint32 creation_time_seconds = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setCreationTimeSeconds($var)
    {
        GPBUtil::checkUint32($var);
        $this->creation_time_seconds = $var;

        return $this;
    }

    /**
     * Device public key. PKCS#1 ASN.1 DER-encoded. Required.
     *
     * Generated from protobuf field <code>optional bytes public_key = 4;</code>
     * @return string
     */
    public function getPublicKey()
    {
        return isset($this->public_key) ? $this->public_key : '';
    }

    public function hasPublicKey()
    {
        return isset($this->public_key);
    }

    public function clearPublicKey()
    {
        unset($this->public_key);
    }

    /**
     * Device public key. PKCS#1 ASN.1 DER-encoded. Required.
     *
     * Generated from protobuf field <code>optional bytes public_key = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setPublicKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->public_key = $var;

        return $this;
    }

    /**
     * Widevine system ID for the device. Required for intermediate and
     * user device certificates.
     *
     * Generated from protobuf field <code>optional uint32 system_id = 5;</code>
     * @return int
     */
    public function getSystemId()
    {
        return isset($this->system_id) ? $this->system_id : 0;
    }

    public function hasSystemId()
    {
        return isset($this->system_id);
    }

    public function clearSystemId()
    {
        unset($this->system_id);
    }

    /**
     * Widevine system ID for the device. Required for intermediate and
     * user device certificates.
     *
     * Generated from protobuf field <code>optional uint32 system_id = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setSystemId($var)
    {
        GPBUtil::checkUint32($var);
        $this->system_id = $var;

        return $this;
    }

    /**
     * Deprecated field, which used to indicate whether the device was a test
     * (non-production) device. The test_device field in ProvisionedDeviceInfo
     * below should be observed instead.
     *
     * Generated from protobuf field <code>optional bool test_device_deprecated = 6 [deprecated = true];</code>
     * @return bool
     * @deprecated
     */
    public function getTestDeviceDeprecated()
    {
        @trigger_error('test_device_deprecated is deprecated.', E_USER_DEPRECATED);
        return isset($this->test_device_deprecated) ? $this->test_device_deprecated : false;
    }

    public function hasTestDeviceDeprecated()
    {
        @trigger_error('test_device_deprecated is deprecated.', E_USER_DEPRECATED);
        return isset($this->test_device_deprecated);
    }

    public function clearTestDeviceDeprecated()
    {
        @trigger_error('test_device_deprecated is deprecated.', E_USER_DEPRECATED);
        unset($this->test_device_deprecated);
    }

    /**
     * Deprecated field, which used to indicate whether the device was a test
     * (non-production) device. The test_device field in ProvisionedDeviceInfo
     * below should be observed instead.
     *
     * Generated from protobuf field <code>optional bool test_device_deprecated = 6 [deprecated = true];</code>
     * @param bool $var
     * @return $this
     * @deprecated
     */
    public function setTestDeviceDeprecated($var)
    {
        @trigger_error('test_device_deprecated is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkBool($var);
        $this->test_device_deprecated = $var;

        return $this;
    }

    /**
     * Service identifier (web origin) for the service which owns the certificate.
     * Required for service certificates.
     *
     * Generated from protobuf field <code>optional string service_id = 7;</code>
     * @return string
     */
    public function getServiceId()
    {
        return isset($this->service_id) ? $this->service_id : '';
    }

    public function hasServiceId()
    {
        return isset($this->service_id);
    }

    public function clearServiceId()
    {
        unset($this->service_id);
    }

    /**
     * Service identifier (web origin) for the service which owns the certificate.
     * Required for service certificates.
     *
     * Generated from protobuf field <code>optional string service_id = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setServiceId($var)
    {
        GPBUtil::checkString($var, True);
        $this->service_id = $var;

        return $this;
    }

}

