<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: license_protocol.proto

namespace VideoWidevineServer\SDK;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Provisioning response sent by the provisioning server to client devices.
 *
 * Generated from protobuf message <code>VideoWidevineServer.SDK.ProvisioningResponse</code>
 */
class ProvisioningResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * AES-128 encrypted device private RSA key. PKCS#1 ASN.1 DER-encoded.
     * Required.
     *
     * Generated from protobuf field <code>optional bytes device_rsa_key = 1;</code>
     */
    protected $device_rsa_key = null;
    /**
     * Initialization vector used to encrypt device_rsa_key. Required.
     *
     * Generated from protobuf field <code>optional bytes device_rsa_key_iv = 2;</code>
     */
    protected $device_rsa_key_iv = null;
    /**
     * Serialized SignedDeviceCertificate. Required.
     *
     * Generated from protobuf field <code>optional bytes device_certificate = 3;</code>
     */
    protected $device_certificate = null;
    /**
     * Nonce value matching nonce in ProvisioningRequest. Required.
     *
     * Generated from protobuf field <code>optional bytes nonce = 4;</code>
     */
    protected $nonce = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $device_rsa_key
     *           AES-128 encrypted device private RSA key. PKCS#1 ASN.1 DER-encoded.
     *           Required.
     *     @type string $device_rsa_key_iv
     *           Initialization vector used to encrypt device_rsa_key. Required.
     *     @type string $device_certificate
     *           Serialized SignedDeviceCertificate. Required.
     *     @type string $nonce
     *           Nonce value matching nonce in ProvisioningRequest. Required.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\LicenseProtocol::initOnce();
        parent::__construct($data);
    }

    /**
     * AES-128 encrypted device private RSA key. PKCS#1 ASN.1 DER-encoded.
     * Required.
     *
     * Generated from protobuf field <code>optional bytes device_rsa_key = 1;</code>
     * @return string
     */
    public function getDeviceRsaKey()
    {
        return isset($this->device_rsa_key) ? $this->device_rsa_key : '';
    }

    public function hasDeviceRsaKey()
    {
        return isset($this->device_rsa_key);
    }

    public function clearDeviceRsaKey()
    {
        unset($this->device_rsa_key);
    }

    /**
     * AES-128 encrypted device private RSA key. PKCS#1 ASN.1 DER-encoded.
     * Required.
     *
     * Generated from protobuf field <code>optional bytes device_rsa_key = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setDeviceRsaKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->device_rsa_key = $var;

        return $this;
    }

    /**
     * Initialization vector used to encrypt device_rsa_key. Required.
     *
     * Generated from protobuf field <code>optional bytes device_rsa_key_iv = 2;</code>
     * @return string
     */
    public function getDeviceRsaKeyIv()
    {
        return isset($this->device_rsa_key_iv) ? $this->device_rsa_key_iv : '';
    }

    public function hasDeviceRsaKeyIv()
    {
        return isset($this->device_rsa_key_iv);
    }

    public function clearDeviceRsaKeyIv()
    {
        unset($this->device_rsa_key_iv);
    }

    /**
     * Initialization vector used to encrypt device_rsa_key. Required.
     *
     * Generated from protobuf field <code>optional bytes device_rsa_key_iv = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setDeviceRsaKeyIv($var)
    {
        GPBUtil::checkString($var, False);
        $this->device_rsa_key_iv = $var;

        return $this;
    }

    /**
     * Serialized SignedDeviceCertificate. Required.
     *
     * Generated from protobuf field <code>optional bytes device_certificate = 3;</code>
     * @return string
     */
    public function getDeviceCertificate()
    {
        return isset($this->device_certificate) ? $this->device_certificate : '';
    }

    public function hasDeviceCertificate()
    {
        return isset($this->device_certificate);
    }

    public function clearDeviceCertificate()
    {
        unset($this->device_certificate);
    }

    /**
     * Serialized SignedDeviceCertificate. Required.
     *
     * Generated from protobuf field <code>optional bytes device_certificate = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setDeviceCertificate($var)
    {
        GPBUtil::checkString($var, False);
        $this->device_certificate = $var;

        return $this;
    }

    /**
     * Nonce value matching nonce in ProvisioningRequest. Required.
     *
     * Generated from protobuf field <code>optional bytes nonce = 4;</code>
     * @return string
     */
    public function getNonce()
    {
        return isset($this->nonce) ? $this->nonce : '';
    }

    public function hasNonce()
    {
        return isset($this->nonce);
    }

    public function clearNonce()
    {
        unset($this->nonce);
    }

    /**
     * Nonce value matching nonce in ProvisioningRequest. Required.
     *
     * Generated from protobuf field <code>optional bytes nonce = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setNonce($var)
    {
        GPBUtil::checkString($var, False);
        $this->nonce = $var;

        return $this;
    }

}

