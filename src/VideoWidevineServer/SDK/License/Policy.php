<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: license_protocol.proto

namespace VideoWidevineServer\SDK\License;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>VideoWidevineServer.SDK.License.Policy</code>
 */
class Policy extends \Google\Protobuf\Internal\Message
{
    /**
     * Indicates that playback of the content is allowed.
     *
     * Generated from protobuf field <code>optional bool can_play = 1;</code>
     */
    protected $can_play = null;
    /**
     * Indicates that the license may be persisted to non-volatile
     * storage for offline use.
     *
     * Generated from protobuf field <code>optional bool can_persist = 2;</code>
     */
    protected $can_persist = null;
    /**
     * Indicates that renewal of this license is allowed.
     *
     * Generated from protobuf field <code>optional bool can_renew = 3;</code>
     */
    protected $can_renew = null;
    /**
     * Indicates the rental window.
     *
     * Generated from protobuf field <code>optional int64 rental_duration_seconds = 4;</code>
     */
    protected $rental_duration_seconds = null;
    /**
     * Indicates the viewing window, once playback has begun.
     *
     * Generated from protobuf field <code>optional int64 playback_duration_seconds = 5;</code>
     */
    protected $playback_duration_seconds = null;
    /**
     * Indicates the time window for this specific license.
     *
     * Generated from protobuf field <code>optional int64 license_duration_seconds = 6;</code>
     */
    protected $license_duration_seconds = null;
    /**
     * The window of time, in which playback is allowed to continue while
     * renewal is attempted, yet unsuccessful due to backend problems with
     * the license server.
     *
     * Generated from protobuf field <code>optional int64 renewal_recovery_duration_seconds = 7;</code>
     */
    protected $renewal_recovery_duration_seconds = null;
    /**
     * All renewal requests for this license shall be directed to the
     * specified URL.
     *
     * Generated from protobuf field <code>optional string renewal_server_url = 8;</code>
     */
    protected $renewal_server_url = null;
    /**
     * How many seconds after license_start_time, before renewal is first
     * attempted.
     *
     * Generated from protobuf field <code>optional int64 renewal_delay_seconds = 9;</code>
     */
    protected $renewal_delay_seconds = null;
    /**
     * Specifies the delay in seconds between subsequent license
     * renewal requests, in case of failure.
     *
     * Generated from protobuf field <code>optional int64 renewal_retry_interval_seconds = 10;</code>
     */
    protected $renewal_retry_interval_seconds = null;
    /**
     * Indicates that the license shall be sent for renewal when usage is
     * started.
     *
     * Generated from protobuf field <code>optional bool renew_with_usage = 11;</code>
     */
    protected $renew_with_usage = null;
    /**
     * Indicates to client that license renewal and release requests ought to
     * include ClientIdentification (client_id).
     *
     * Generated from protobuf field <code>optional bool renew_with_client_id = 12;</code>
     */
    protected $renew_with_client_id = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type bool $can_play
     *           Indicates that playback of the content is allowed.
     *     @type bool $can_persist
     *           Indicates that the license may be persisted to non-volatile
     *           storage for offline use.
     *     @type bool $can_renew
     *           Indicates that renewal of this license is allowed.
     *     @type int|string $rental_duration_seconds
     *           Indicates the rental window.
     *     @type int|string $playback_duration_seconds
     *           Indicates the viewing window, once playback has begun.
     *     @type int|string $license_duration_seconds
     *           Indicates the time window for this specific license.
     *     @type int|string $renewal_recovery_duration_seconds
     *           The window of time, in which playback is allowed to continue while
     *           renewal is attempted, yet unsuccessful due to backend problems with
     *           the license server.
     *     @type string $renewal_server_url
     *           All renewal requests for this license shall be directed to the
     *           specified URL.
     *     @type int|string $renewal_delay_seconds
     *           How many seconds after license_start_time, before renewal is first
     *           attempted.
     *     @type int|string $renewal_retry_interval_seconds
     *           Specifies the delay in seconds between subsequent license
     *           renewal requests, in case of failure.
     *     @type bool $renew_with_usage
     *           Indicates that the license shall be sent for renewal when usage is
     *           started.
     *     @type bool $renew_with_client_id
     *           Indicates to client that license renewal and release requests ought to
     *           include ClientIdentification (client_id).
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\LicenseProtocol::initOnce();
        parent::__construct($data);
    }

    /**
     * Indicates that playback of the content is allowed.
     *
     * Generated from protobuf field <code>optional bool can_play = 1;</code>
     * @return bool
     */
    public function getCanPlay()
    {
        return isset($this->can_play) ? $this->can_play : false;
    }

    public function hasCanPlay()
    {
        return isset($this->can_play);
    }

    public function clearCanPlay()
    {
        unset($this->can_play);
    }

    /**
     * Indicates that playback of the content is allowed.
     *
     * Generated from protobuf field <code>optional bool can_play = 1;</code>
     * @param bool $var
     * @return $this
     */
    public function setCanPlay($var)
    {
        GPBUtil::checkBool($var);
        $this->can_play = $var;

        return $this;
    }

    /**
     * Indicates that the license may be persisted to non-volatile
     * storage for offline use.
     *
     * Generated from protobuf field <code>optional bool can_persist = 2;</code>
     * @return bool
     */
    public function getCanPersist()
    {
        return isset($this->can_persist) ? $this->can_persist : false;
    }

    public function hasCanPersist()
    {
        return isset($this->can_persist);
    }

    public function clearCanPersist()
    {
        unset($this->can_persist);
    }

    /**
     * Indicates that the license may be persisted to non-volatile
     * storage for offline use.
     *
     * Generated from protobuf field <code>optional bool can_persist = 2;</code>
     * @param bool $var
     * @return $this
     */
    public function setCanPersist($var)
    {
        GPBUtil::checkBool($var);
        $this->can_persist = $var;

        return $this;
    }

    /**
     * Indicates that renewal of this license is allowed.
     *
     * Generated from protobuf field <code>optional bool can_renew = 3;</code>
     * @return bool
     */
    public function getCanRenew()
    {
        return isset($this->can_renew) ? $this->can_renew : false;
    }

    public function hasCanRenew()
    {
        return isset($this->can_renew);
    }

    public function clearCanRenew()
    {
        unset($this->can_renew);
    }

    /**
     * Indicates that renewal of this license is allowed.
     *
     * Generated from protobuf field <code>optional bool can_renew = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setCanRenew($var)
    {
        GPBUtil::checkBool($var);
        $this->can_renew = $var;

        return $this;
    }

    /**
     * Indicates the rental window.
     *
     * Generated from protobuf field <code>optional int64 rental_duration_seconds = 4;</code>
     * @return int|string
     */
    public function getRentalDurationSeconds()
    {
        return isset($this->rental_duration_seconds) ? $this->rental_duration_seconds : 0;
    }

    public function hasRentalDurationSeconds()
    {
        return isset($this->rental_duration_seconds);
    }

    public function clearRentalDurationSeconds()
    {
        unset($this->rental_duration_seconds);
    }

    /**
     * Indicates the rental window.
     *
     * Generated from protobuf field <code>optional int64 rental_duration_seconds = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setRentalDurationSeconds($var)
    {
        GPBUtil::checkInt64($var);
        $this->rental_duration_seconds = $var;

        return $this;
    }

    /**
     * Indicates the viewing window, once playback has begun.
     *
     * Generated from protobuf field <code>optional int64 playback_duration_seconds = 5;</code>
     * @return int|string
     */
    public function getPlaybackDurationSeconds()
    {
        return isset($this->playback_duration_seconds) ? $this->playback_duration_seconds : 0;
    }

    public function hasPlaybackDurationSeconds()
    {
        return isset($this->playback_duration_seconds);
    }

    public function clearPlaybackDurationSeconds()
    {
        unset($this->playback_duration_seconds);
    }

    /**
     * Indicates the viewing window, once playback has begun.
     *
     * Generated from protobuf field <code>optional int64 playback_duration_seconds = 5;</code>
     * @param int|string $var
     * @return $this
     */
    public function setPlaybackDurationSeconds($var)
    {
        GPBUtil::checkInt64($var);
        $this->playback_duration_seconds = $var;

        return $this;
    }

    /**
     * Indicates the time window for this specific license.
     *
     * Generated from protobuf field <code>optional int64 license_duration_seconds = 6;</code>
     * @return int|string
     */
    public function getLicenseDurationSeconds()
    {
        return isset($this->license_duration_seconds) ? $this->license_duration_seconds : 0;
    }

    public function hasLicenseDurationSeconds()
    {
        return isset($this->license_duration_seconds);
    }

    public function clearLicenseDurationSeconds()
    {
        unset($this->license_duration_seconds);
    }

    /**
     * Indicates the time window for this specific license.
     *
     * Generated from protobuf field <code>optional int64 license_duration_seconds = 6;</code>
     * @param int|string $var
     * @return $this
     */
    public function setLicenseDurationSeconds($var)
    {
        GPBUtil::checkInt64($var);
        $this->license_duration_seconds = $var;

        return $this;
    }

    /**
     * The window of time, in which playback is allowed to continue while
     * renewal is attempted, yet unsuccessful due to backend problems with
     * the license server.
     *
     * Generated from protobuf field <code>optional int64 renewal_recovery_duration_seconds = 7;</code>
     * @return int|string
     */
    public function getRenewalRecoveryDurationSeconds()
    {
        return isset($this->renewal_recovery_duration_seconds) ? $this->renewal_recovery_duration_seconds : 0;
    }

    public function hasRenewalRecoveryDurationSeconds()
    {
        return isset($this->renewal_recovery_duration_seconds);
    }

    public function clearRenewalRecoveryDurationSeconds()
    {
        unset($this->renewal_recovery_duration_seconds);
    }

    /**
     * The window of time, in which playback is allowed to continue while
     * renewal is attempted, yet unsuccessful due to backend problems with
     * the license server.
     *
     * Generated from protobuf field <code>optional int64 renewal_recovery_duration_seconds = 7;</code>
     * @param int|string $var
     * @return $this
     */
    public function setRenewalRecoveryDurationSeconds($var)
    {
        GPBUtil::checkInt64($var);
        $this->renewal_recovery_duration_seconds = $var;

        return $this;
    }

    /**
     * All renewal requests for this license shall be directed to the
     * specified URL.
     *
     * Generated from protobuf field <code>optional string renewal_server_url = 8;</code>
     * @return string
     */
    public function getRenewalServerUrl()
    {
        return isset($this->renewal_server_url) ? $this->renewal_server_url : '';
    }

    public function hasRenewalServerUrl()
    {
        return isset($this->renewal_server_url);
    }

    public function clearRenewalServerUrl()
    {
        unset($this->renewal_server_url);
    }

    /**
     * All renewal requests for this license shall be directed to the
     * specified URL.
     *
     * Generated from protobuf field <code>optional string renewal_server_url = 8;</code>
     * @param string $var
     * @return $this
     */
    public function setRenewalServerUrl($var)
    {
        GPBUtil::checkString($var, True);
        $this->renewal_server_url = $var;

        return $this;
    }

    /**
     * How many seconds after license_start_time, before renewal is first
     * attempted.
     *
     * Generated from protobuf field <code>optional int64 renewal_delay_seconds = 9;</code>
     * @return int|string
     */
    public function getRenewalDelaySeconds()
    {
        return isset($this->renewal_delay_seconds) ? $this->renewal_delay_seconds : 0;
    }

    public function hasRenewalDelaySeconds()
    {
        return isset($this->renewal_delay_seconds);
    }

    public function clearRenewalDelaySeconds()
    {
        unset($this->renewal_delay_seconds);
    }

    /**
     * How many seconds after license_start_time, before renewal is first
     * attempted.
     *
     * Generated from protobuf field <code>optional int64 renewal_delay_seconds = 9;</code>
     * @param int|string $var
     * @return $this
     */
    public function setRenewalDelaySeconds($var)
    {
        GPBUtil::checkInt64($var);
        $this->renewal_delay_seconds = $var;

        return $this;
    }

    /**
     * Specifies the delay in seconds between subsequent license
     * renewal requests, in case of failure.
     *
     * Generated from protobuf field <code>optional int64 renewal_retry_interval_seconds = 10;</code>
     * @return int|string
     */
    public function getRenewalRetryIntervalSeconds()
    {
        return isset($this->renewal_retry_interval_seconds) ? $this->renewal_retry_interval_seconds : 0;
    }

    public function hasRenewalRetryIntervalSeconds()
    {
        return isset($this->renewal_retry_interval_seconds);
    }

    public function clearRenewalRetryIntervalSeconds()
    {
        unset($this->renewal_retry_interval_seconds);
    }

    /**
     * Specifies the delay in seconds between subsequent license
     * renewal requests, in case of failure.
     *
     * Generated from protobuf field <code>optional int64 renewal_retry_interval_seconds = 10;</code>
     * @param int|string $var
     * @return $this
     */
    public function setRenewalRetryIntervalSeconds($var)
    {
        GPBUtil::checkInt64($var);
        $this->renewal_retry_interval_seconds = $var;

        return $this;
    }

    /**
     * Indicates that the license shall be sent for renewal when usage is
     * started.
     *
     * Generated from protobuf field <code>optional bool renew_with_usage = 11;</code>
     * @return bool
     */
    public function getRenewWithUsage()
    {
        return isset($this->renew_with_usage) ? $this->renew_with_usage : false;
    }

    public function hasRenewWithUsage()
    {
        return isset($this->renew_with_usage);
    }

    public function clearRenewWithUsage()
    {
        unset($this->renew_with_usage);
    }

    /**
     * Indicates that the license shall be sent for renewal when usage is
     * started.
     *
     * Generated from protobuf field <code>optional bool renew_with_usage = 11;</code>
     * @param bool $var
     * @return $this
     */
    public function setRenewWithUsage($var)
    {
        GPBUtil::checkBool($var);
        $this->renew_with_usage = $var;

        return $this;
    }

    /**
     * Indicates to client that license renewal and release requests ought to
     * include ClientIdentification (client_id).
     *
     * Generated from protobuf field <code>optional bool renew_with_client_id = 12;</code>
     * @return bool
     */
    public function getRenewWithClientId()
    {
        return isset($this->renew_with_client_id) ? $this->renew_with_client_id : false;
    }

    public function hasRenewWithClientId()
    {
        return isset($this->renew_with_client_id);
    }

    public function clearRenewWithClientId()
    {
        unset($this->renew_with_client_id);
    }

    /**
     * Indicates to client that license renewal and release requests ought to
     * include ClientIdentification (client_id).
     *
     * Generated from protobuf field <code>optional bool renew_with_client_id = 12;</code>
     * @param bool $var
     * @return $this
     */
    public function setRenewWithClientId($var)
    {
        GPBUtil::checkBool($var);
        $this->renew_with_client_id = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Policy::class, \VideoWidevineServer\SDK\License_Policy::class);

