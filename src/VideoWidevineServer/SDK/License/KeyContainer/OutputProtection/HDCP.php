<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: license_protocol.proto

namespace VideoWidevineServer\SDK\License\KeyContainer\OutputProtection;

use UnexpectedValueException;

/**
 * Indicates whether HDCP is required on digital outputs, and which
 * version should be used.
 *
 * Protobuf type <code>VideoWidevineServer.SDK.License.KeyContainer.OutputProtection.HDCP</code>
 */
class HDCP
{
    /**
     * Generated from protobuf enum <code>HDCP_NONE = 0;</code>
     */
    const HDCP_NONE = 0;
    /**
     * Generated from protobuf enum <code>HDCP_V1 = 1;</code>
     */
    const HDCP_V1 = 1;
    /**
     * Generated from protobuf enum <code>HDCP_V2 = 2;</code>
     */
    const HDCP_V2 = 2;
    /**
     * Generated from protobuf enum <code>HDCP_V2_1 = 3;</code>
     */
    const HDCP_V2_1 = 3;
    /**
     * Generated from protobuf enum <code>HDCP_V2_2 = 4;</code>
     */
    const HDCP_V2_2 = 4;
    /**
     * Generated from protobuf enum <code>HDCP_NO_DIGITAL_OUTPUT = 255;</code>
     */
    const HDCP_NO_DIGITAL_OUTPUT = 255;

    private static $valueToName = [
        self::HDCP_NONE => 'HDCP_NONE',
        self::HDCP_V1 => 'HDCP_V1',
        self::HDCP_V2 => 'HDCP_V2',
        self::HDCP_V2_1 => 'HDCP_V2_1',
        self::HDCP_V2_2 => 'HDCP_V2_2',
        self::HDCP_NO_DIGITAL_OUTPUT => 'HDCP_NO_DIGITAL_OUTPUT',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(HDCP::class, \VideoWidevineServer\SDK\License_KeyContainer_OutputProtection_HDCP::class);

