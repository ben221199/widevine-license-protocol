<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: license_protocol.proto

namespace VideoWidevineServer\SDK\License\KeyContainer;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>VideoWidevineServer.SDK.License.KeyContainer.OperatorSessionKeyPermissions</code>
 */
class OperatorSessionKeyPermissions extends \Google\Protobuf\Internal\Message
{
    /**
     * Permissions/key usage flags for operator service keys
     * (type = OPERATOR_SESSION).
     *
     * Generated from protobuf field <code>optional bool allow_encrypt = 1;</code>
     */
    protected $allow_encrypt = null;
    /**
     * Generated from protobuf field <code>optional bool allow_decrypt = 2;</code>
     */
    protected $allow_decrypt = null;
    /**
     * Generated from protobuf field <code>optional bool allow_sign = 3;</code>
     */
    protected $allow_sign = null;
    /**
     * Generated from protobuf field <code>optional bool allow_signature_verify = 4;</code>
     */
    protected $allow_signature_verify = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type bool $allow_encrypt
     *           Permissions/key usage flags for operator service keys
     *           (type = OPERATOR_SESSION).
     *     @type bool $allow_decrypt
     *     @type bool $allow_sign
     *     @type bool $allow_signature_verify
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\LicenseProtocol::initOnce();
        parent::__construct($data);
    }

    /**
     * Permissions/key usage flags for operator service keys
     * (type = OPERATOR_SESSION).
     *
     * Generated from protobuf field <code>optional bool allow_encrypt = 1;</code>
     * @return bool
     */
    public function getAllowEncrypt()
    {
        return isset($this->allow_encrypt) ? $this->allow_encrypt : false;
    }

    public function hasAllowEncrypt()
    {
        return isset($this->allow_encrypt);
    }

    public function clearAllowEncrypt()
    {
        unset($this->allow_encrypt);
    }

    /**
     * Permissions/key usage flags for operator service keys
     * (type = OPERATOR_SESSION).
     *
     * Generated from protobuf field <code>optional bool allow_encrypt = 1;</code>
     * @param bool $var
     * @return $this
     */
    public function setAllowEncrypt($var)
    {
        GPBUtil::checkBool($var);
        $this->allow_encrypt = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional bool allow_decrypt = 2;</code>
     * @return bool
     */
    public function getAllowDecrypt()
    {
        return isset($this->allow_decrypt) ? $this->allow_decrypt : false;
    }

    public function hasAllowDecrypt()
    {
        return isset($this->allow_decrypt);
    }

    public function clearAllowDecrypt()
    {
        unset($this->allow_decrypt);
    }

    /**
     * Generated from protobuf field <code>optional bool allow_decrypt = 2;</code>
     * @param bool $var
     * @return $this
     */
    public function setAllowDecrypt($var)
    {
        GPBUtil::checkBool($var);
        $this->allow_decrypt = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional bool allow_sign = 3;</code>
     * @return bool
     */
    public function getAllowSign()
    {
        return isset($this->allow_sign) ? $this->allow_sign : false;
    }

    public function hasAllowSign()
    {
        return isset($this->allow_sign);
    }

    public function clearAllowSign()
    {
        unset($this->allow_sign);
    }

    /**
     * Generated from protobuf field <code>optional bool allow_sign = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setAllowSign($var)
    {
        GPBUtil::checkBool($var);
        $this->allow_sign = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional bool allow_signature_verify = 4;</code>
     * @return bool
     */
    public function getAllowSignatureVerify()
    {
        return isset($this->allow_signature_verify) ? $this->allow_signature_verify : false;
    }

    public function hasAllowSignatureVerify()
    {
        return isset($this->allow_signature_verify);
    }

    public function clearAllowSignatureVerify()
    {
        unset($this->allow_signature_verify);
    }

    /**
     * Generated from protobuf field <code>optional bool allow_signature_verify = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setAllowSignatureVerify($var)
    {
        GPBUtil::checkBool($var);
        $this->allow_signature_verify = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(OperatorSessionKeyPermissions::class, \VideoWidevineServer\SDK\License_KeyContainer_OperatorSessionKeyPermissions::class);

