<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: license_protocol.proto

namespace VideoWidevineServer\SDK;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * EncryptedClientIdentification message used to hold ClientIdentification
 * messages encrypted for privacy purposes.
 *
 * Generated from protobuf message <code>VideoWidevineServer.SDK.EncryptedClientIdentification</code>
 */
class EncryptedClientIdentification extends \Google\Protobuf\Internal\Message
{
    /**
     * Service ID for which the ClientIdentifcation is encrypted (owner of service
     * certificate).
     *
     * Generated from protobuf field <code>optional string service_id = 1;</code>
     */
    protected $service_id = null;
    /**
     * Serial number for the service certificate for which ClientIdentification is
     * encrypted.
     *
     * Generated from protobuf field <code>optional bytes service_certificate_serial_number = 2;</code>
     */
    protected $service_certificate_serial_number = null;
    /**
     * Serialized ClientIdentification message, encrypted with the privacy key using
     * AES-128-CBC with PKCS#5 padding.
     *
     * Generated from protobuf field <code>optional bytes encrypted_client_id = 3;</code>
     */
    protected $encrypted_client_id = null;
    /**
     * Initialization vector needed to decrypt encrypted_client_id.
     *
     * Generated from protobuf field <code>optional bytes encrypted_client_id_iv = 4;</code>
     */
    protected $encrypted_client_id_iv = null;
    /**
     * AES-128 privacy key, encrytped with the service public public key using
     * RSA-OAEP.
     *
     * Generated from protobuf field <code>optional bytes encrypted_privacy_key = 5;</code>
     */
    protected $encrypted_privacy_key = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $service_id
     *           Service ID for which the ClientIdentifcation is encrypted (owner of service
     *           certificate).
     *     @type string $service_certificate_serial_number
     *           Serial number for the service certificate for which ClientIdentification is
     *           encrypted.
     *     @type string $encrypted_client_id
     *           Serialized ClientIdentification message, encrypted with the privacy key using
     *           AES-128-CBC with PKCS#5 padding.
     *     @type string $encrypted_client_id_iv
     *           Initialization vector needed to decrypt encrypted_client_id.
     *     @type string $encrypted_privacy_key
     *           AES-128 privacy key, encrytped with the service public public key using
     *           RSA-OAEP.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\LicenseProtocol::initOnce();
        parent::__construct($data);
    }

    /**
     * Service ID for which the ClientIdentifcation is encrypted (owner of service
     * certificate).
     *
     * Generated from protobuf field <code>optional string service_id = 1;</code>
     * @return string
     */
    public function getServiceId()
    {
        return isset($this->service_id) ? $this->service_id : '';
    }

    public function hasServiceId()
    {
        return isset($this->service_id);
    }

    public function clearServiceId()
    {
        unset($this->service_id);
    }

    /**
     * Service ID for which the ClientIdentifcation is encrypted (owner of service
     * certificate).
     *
     * Generated from protobuf field <code>optional string service_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setServiceId($var)
    {
        GPBUtil::checkString($var, True);
        $this->service_id = $var;

        return $this;
    }

    /**
     * Serial number for the service certificate for which ClientIdentification is
     * encrypted.
     *
     * Generated from protobuf field <code>optional bytes service_certificate_serial_number = 2;</code>
     * @return string
     */
    public function getServiceCertificateSerialNumber()
    {
        return isset($this->service_certificate_serial_number) ? $this->service_certificate_serial_number : '';
    }

    public function hasServiceCertificateSerialNumber()
    {
        return isset($this->service_certificate_serial_number);
    }

    public function clearServiceCertificateSerialNumber()
    {
        unset($this->service_certificate_serial_number);
    }

    /**
     * Serial number for the service certificate for which ClientIdentification is
     * encrypted.
     *
     * Generated from protobuf field <code>optional bytes service_certificate_serial_number = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setServiceCertificateSerialNumber($var)
    {
        GPBUtil::checkString($var, False);
        $this->service_certificate_serial_number = $var;

        return $this;
    }

    /**
     * Serialized ClientIdentification message, encrypted with the privacy key using
     * AES-128-CBC with PKCS#5 padding.
     *
     * Generated from protobuf field <code>optional bytes encrypted_client_id = 3;</code>
     * @return string
     */
    public function getEncryptedClientId()
    {
        return isset($this->encrypted_client_id) ? $this->encrypted_client_id : '';
    }

    public function hasEncryptedClientId()
    {
        return isset($this->encrypted_client_id);
    }

    public function clearEncryptedClientId()
    {
        unset($this->encrypted_client_id);
    }

    /**
     * Serialized ClientIdentification message, encrypted with the privacy key using
     * AES-128-CBC with PKCS#5 padding.
     *
     * Generated from protobuf field <code>optional bytes encrypted_client_id = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setEncryptedClientId($var)
    {
        GPBUtil::checkString($var, False);
        $this->encrypted_client_id = $var;

        return $this;
    }

    /**
     * Initialization vector needed to decrypt encrypted_client_id.
     *
     * Generated from protobuf field <code>optional bytes encrypted_client_id_iv = 4;</code>
     * @return string
     */
    public function getEncryptedClientIdIv()
    {
        return isset($this->encrypted_client_id_iv) ? $this->encrypted_client_id_iv : '';
    }

    public function hasEncryptedClientIdIv()
    {
        return isset($this->encrypted_client_id_iv);
    }

    public function clearEncryptedClientIdIv()
    {
        unset($this->encrypted_client_id_iv);
    }

    /**
     * Initialization vector needed to decrypt encrypted_client_id.
     *
     * Generated from protobuf field <code>optional bytes encrypted_client_id_iv = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setEncryptedClientIdIv($var)
    {
        GPBUtil::checkString($var, False);
        $this->encrypted_client_id_iv = $var;

        return $this;
    }

    /**
     * AES-128 privacy key, encrytped with the service public public key using
     * RSA-OAEP.
     *
     * Generated from protobuf field <code>optional bytes encrypted_privacy_key = 5;</code>
     * @return string
     */
    public function getEncryptedPrivacyKey()
    {
        return isset($this->encrypted_privacy_key) ? $this->encrypted_privacy_key : '';
    }

    public function hasEncryptedPrivacyKey()
    {
        return isset($this->encrypted_privacy_key);
    }

    public function clearEncryptedPrivacyKey()
    {
        unset($this->encrypted_privacy_key);
    }

    /**
     * AES-128 privacy key, encrytped with the service public public key using
     * RSA-OAEP.
     *
     * Generated from protobuf field <code>optional bytes encrypted_privacy_key = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setEncryptedPrivacyKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->encrypted_privacy_key = $var;

        return $this;
    }

}

